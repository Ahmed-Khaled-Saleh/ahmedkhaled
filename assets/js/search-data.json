{
  
    
        "post0": {
            "title": "Eloquent JS,  Chapter 1.",
            "content": "Introduction. . Computers memory can contain just two things, Data and instructions (some Lisp folks treat them similarily, but thit is another story). Data is stored as a sequence of zeros and ones (0s, 1s). The 0s represent the abscence of current or the low voltage, while the 1s represent the reverse. Computers own langauge is those 0s and 1s. Any computer cannot understand anything else.This language of 0s and 1s has its own branch of mathematics, called boolean algebra that can describe it very acccurately. But what makes programming able to produces such beautiful value (spreadsheets, Web browsers, ...etc), is that it uses a tool called abstraction that enables programmers to work with higher level languages called Progamming languages. It&#39;s a universally accepted truth that working with higher level programming langauges is much less complex than working with own machine language(Sorry for some Embedded systems folks and retro enthusiasts). . Abstraction : The tool of the matter. . We said that the higher level programming languages are enabled using a technique (or a methodology) called Abstraction. Abstractoin tries to decompose the problem into different layers and hides the unneccessary details between each subsequent layers. The following figure describes what abstraction is all about in terms of programming higher level langauges . . . The technique shown above makes it easy to think about problems in terms of layers. Actually, The same approach could be applied to other disciplines as well. The general framework upon which Abstraction exist is the idea that everything becomes understandable and easy to grasp the moment you break it to small pieces and try to understand them separately, then , recurisevley, combine the small pieces toghter to uncover the whole picture . The high level programming languages layer uses the interface provided by the implementation part. . We can see from the figure that Abstraction hides a lot of details which otherwise could become a pain to work with. This makes the complexity a lot easier to handle. At the end of the day, programming is a very complex craft when it comes to designing and implementing large scale systems.But abstraction has a very bad side effect. Hiding a lot of details may result in a confusing understanding of the whole problem. This is a problem only when you are trying to do one of two things: . if the problem is so hard that you cannot really decompose it effectively . | if You are trying to innovate (at this level, you are in a must to break the abstraction level). | . To conclude on abstraction, The level at which you abstract is a skill, a rare one. There would be no better way to end talking about abstraction than the wizard words Gerald Gay Sussmann: . The key to understand complicated things is knowing what not to look at . . JavaScript, a little bit of history. . One such higher level programming langauge is JavaScript, JS for short. It Was Created as a way to add programability to the Netscape Navigator Web browser. Js together with HTML(Hyper Text Markup Language) and CSS(Cascading Style sheets) are the tools reponsible for such huge boom of the web. This is the timeline for the releases of the Js versions : . Between 2000 and 2010, Js version three was the dominant version in browsers . | The fourth version abandoned in 2008 (actually, you can say that this was never released). | 2009 : The fifth version EcmaScript 5 (theversion where JIT compilers were introduced to JS). | 2015 : The sixth edition EcmaScript 6 (2015) A major release . | . Actually, Js version six, which is known as EcmaScript 6 is the current stable version with minor updates regularly released from the Ecma standaraization committee. . JavaScript , values and Data Types . Programming deals with Data as we said. But those data aren&#39;t created from thin air. They are the reflection of a real world information the describes a part of a problem we want to solve. consider the following statement. . my name is yasser. . This could be interpreted inside the computer as :&gt; a data item that holds a text value to store the string &quot;yasser&quot; . This process is not always straighforward or one-to-one correspondence. Some real world information included in problem definitions might not have a straight forward representaion in the langauge we are using (but this is a very broad problem and far from our concern here). Data in javascript can be categorized in a number of ways. one such way is to say that data is either Atomic or combound / non atomic .The atomic values in Js are {Numbers, Strings, Boolean, undefined, null}. . numbers -&gt; to represent different types of numbers including whole number, decimals and more. | Strings -&gt; to represnt text values . | Boolean -&gt; to represnts only two values {true, false}. | undefined -&gt; to represnt data that has no value associated with it. | null -&gt; to state verbally that a certain data item has the value of nothing (yes that&#39;s what null means). | . We can work with numbers pretty much like a calclator . here are some examples. . console.log(5 * 50); console.log(1 - 25); console.log(8 &amp; 2)//the module operator also called remainder,ehich computes the remainder after dividing the first number on the second. . 250 -24 0 . Pretty much every programming language has certain set of operators that are built in within its implementation. this table shows them : . family of Operators Description Example . Mathematical operators | Perform basic addition, subtraction , ...etc. | 50-20 | . Comparison operators | comparing data | 5 &lt; 25 | . Lgical Operators | Perform logic operations (and, or, not) | true &amp;&amp; false | . There are some other operators that don&#39;t fit the categories above. For example, the typeof operator is a unary operator,(which is a fancy way to state that it takes one argument), whcih returns the type of the value passed to it as argument. . console.log(typeof &quot;hello&quot;) console.log(typeof 25) . string number . You might have noticed that in order to represent a string in java script we usd double quotes. But this is not the only way we can do it. We can represent srings in three different ways : . Single quotes. | Double quotes . | Template literals (backtick quote) | . here is some examples . . console.log(&#39;hello darling, where is kitty?&#39;) console.log(&quot;hello darling, where is kitty ?&quot;) console.log(`hello darling where is ${&#39;kitty&#39;}`)//what goes inside ${} is executed and converted to string. . hello darling, where is kitty? hello darling, where is kitty ? hello darling where is kitty . Type Conversion (type coercion) . Things seem very straightforward up till now. Ther&#39;s only one thing that could make you confused in this chapter. That is Type Coercion rules in JS. Those are the roles that the JS Engine uses when applying different operators. for example : . console.log(&quot;5&quot; - 1 ) console.log(null * 2) console.log(undefined + 2) console.log(5 == &quot;5&quot;) . 4 0 NaN true . This weird behavior is a little bit confusing. Actually it&#39;s very confusing at the beginning. Why things happen like that is a question of philosophical basis and we should concern ourselves here with the how question instead. I prefer to link to this great article where this type coercion idea is explained in a very good way. .",
            "url": "https://ahmed-khaled-saleh.github.io/ahmedkhaled/2020/12/18/EloquentJs-CH-1.html",
            "relUrl": "/2020/12/18/EloquentJs-CH-1.html",
            "date": " • Dec 18, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Ahmed Khaled. Computer Science student, Software engineering is my field of . . This is my Technical place on the internet where I write things (both bad an good) about things that are also (bad and good and a combination of both). . My main area of interest are Computer Science (especially WEB and Artifical Intelligence), Science (Especially Physics) and Math (Especially Linear Algebra) . .",
          "url": "https://ahmed-khaled-saleh.github.io/ahmedkhaled/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ahmed-khaled-saleh.github.io/ahmedkhaled/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}